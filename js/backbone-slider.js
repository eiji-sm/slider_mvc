// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

$(function() {
  var SlideDataList, SlideState, Slider, SliderData;
  SlideState = (function(_super) {

    __extends(SlideState, _super);

    function SlideState() {
      return SlideState.__super__.constructor.apply(this, arguments);
    }

    SlideState.prototype.defaults = {
      slideNumber: 1,
      isArrowLeft: false,
      isArrowRight: true
    };

    SlideState.prototype.increase = function(key, val) {
      return this.set(key, this.get(key) + val);
    };

    SlideState.prototype.decrease = function(key, val) {
      return this.set(key, this.get(key) - val);
    };

    return SlideState;

  })(Backbone.Model);
  SliderData = (function(_super) {

    __extends(SliderData, _super);

    function SliderData() {
      return SliderData.__super__.constructor.apply(this, arguments);
    }

    SliderData.prototype.defaulats = {
      url: '',
      title: '',
      description: ''
    };

    return SliderData;

  })(Backbone.Model);
  SlideDataList = (function(_super) {

    __extends(SlideDataList, _super);

    function SlideDataList() {
      return SlideDataList.__super__.constructor.apply(this, arguments);
    }

    SlideDataList.prototype.url = '';

    SlideDataList.prototype.initialize = function() {
      var res, resList, sliderData, _i, _len, _results;
      resList = demoData;
      _results = [];
      for (_i = 0, _len = resList.length; _i < _len; _i++) {
        res = resList[_i];
        sliderData = new SliderData({
          url: res.url,
          title: res.title,
          description: res.description
        });
        _results.push(this.add(sliderData));
      }
      return _results;
    };

    return SlideDataList;

  })(Backbone.Collection);
  Slider = (function(_super) {

    __extends(Slider, _super);

    function Slider() {
      return Slider.__super__.constructor.apply(this, arguments);
    }

    Slider.prototype.el = '#wrapper';

    Slider.prototype.model = {
      state: {}
    };

    Slider.prototype.collection = {
      slideDataList: {}
    };

    Slider.prototype.initialize = function() {
      var self;
      self = this;
      this.render();
      this.model.state.bind('change', function() {
        self.renderSentence();
        self.renderArrow();
        return self.renderNavigation();
      });
      return this.$el.on('click', '.arrowLeft', function() {
        return self.slide('left');
      }).on('click', '.arrowRight', function() {
        return self.slide('right');
      }).on('click', '.slideNaviList', function() {
        return self.slide($(this).index());
      }).on('mouseenter', function() {
        return self.renderArrow();
      }).on('mouseleave', function() {
        return self.hideArrow();
      });
    };

    Slider.prototype.template = function(selector) {
      return _.template(this.$(selector).html());
    };

    Slider.prototype.render = function() {
      var compileSentence, outputSentence, renderSlide, self, sentence;
      self = this;
      renderSlide = function(selector) {
        var compileTemplate, outputTemplate;
        compileTemplate = self.template(selector);
        outputTemplate = compileTemplate({
          len: [0, 1, 2, 3, 4],
          image: self.collection.slideDataList.toJSON()
        });
        return self.$(selector).before(outputTemplate);
      };
      renderSlide('#tmp_slideContent');
      renderSlide('#tmp_slideNaviList');
      compileSentence = this.template('#tmp_slideDescription');
      sentence = this.collection.slideDataList.at(this.model.state.get('slideNumber') - 1);
      outputSentence = compileSentence({
        h2: sentence.get('title'),
        p: sentence.get('description')
      });
      return this.$('#tmp_slideDescription').before(outputSentence);
    };

    Slider.prototype.renderSentence = function() {
      var $description, sentence;
      sentence = this.collection.slideDataList.at(this.model.state.get('slideNumber') - 1);
      $description = this.$('.slideDescription');
      $description.find('h2').text(sentence.get('title'));
      return $description.find('p').text(sentence.get('description'));
    };

    Slider.prototype.renderArrow = function() {
      this.$('.arrowLeft, .arrowRight').addClass('ac');
      switch (this.model.state.get('slideNumber')) {
        case 1:
          return this.$('.arrowLeft').removeClass('ac');
        case 5:
          return this.$('.arrowRight').removeClass('ac');
      }
    };

    Slider.prototype.hideArrow = function() {
      return this.$('.arrowLeft, .arrowRight').removeClass('ac');
    };

    Slider.prototype.renderNavigation = function() {
      var num;
      num = this.model.state.get('slideNumber') - 1;
      return this.$('.slideNaviList').removeClass('ac').eq(num).addClass('ac');
    };

    Slider.prototype.slide = function(toContent) {
      var anamateOptions, animateStyles, slideVlue, slideWidth;
      slideWidth = 640;
      if (this.$('.slideContainer').hasClass('sliding')) {
        return false;
      }
      if (toContent === 'left') {
        slideVlue = "+=" + slideWidth + "px";
        this.model.state.decrease('slideNumber', 1);
      }
      if (toContent === 'right') {
        slideVlue = "-=" + slideWidth + "px";
        this.model.state.increase('slideNumber', 1);
      }
      if ($.isNumeric(toContent)) {
        slideVlue = "-" + (slideWidth * toContent) + "px";
        this.model.state.set('slideNumber', ++toContent);
      }
      animateStyles = {
        marginLeft: slideVlue
      };
      anamateOptions = {
        duration: 'normal',
        easing: 'swing',
        complete: function() {
          return $(this).removeClass('sliding');
        }
      };
      return this.$('.slideContainer').addClass('sliding').animate(animateStyles, anamateOptions);
    };

    return Slider;

  })(Backbone.View);
  return (function() {
    var slideDataList, slider, state;
    state = new SlideState;
    slideDataList = new SlideDataList;
    return slider = new Slider({
      model: {
        state: state
      },
      collection: {
        slideDataList: slideDataList
      }
    });
  })();
});
